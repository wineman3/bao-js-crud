/// <reference types="bun-types" />
import { Errorlike, Server } from "bun";
import Context from "./context";
export default class Bao {
    #private;
    /**
     * Default error handler
     *
     * @param error
     * @returns
     */
    errorHandler: (error: Errorlike) => Response | Promise<Response> | undefined | Promise<undefined>;
    /**
     * Middleware to be run before the path handler
     *
     * @param fn The middleware function to be run before the path handler
     */
    before(fn: IHandler): void;
    /**
     * Middleware to be run after the path handler
     *
     * @param fn The middleware function to be run after the path handler
     */
    after(fn: IHandler): void;
    /**
     * Creates a route for any HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    any(path: string, handler: IHandler): void;
    /**
     * Creates a route for the GET HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    get(path: string, handler: IHandler): void;
    /**
     * Creates a route for the POST HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    post(path: string, handler: IHandler): void;
    /**
     * Creates a route for the PUT HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    put(path: string, handler: IHandler): void;
    /**
     * Creates a route for the DELETE HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    delete(path: string, handler: IHandler): void;
    /**
     * Creates a route for the PATCH HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    patch(path: string, handler: IHandler): void;
    /**
     * Start the server on the specified port
     *
     * @param options The options for the server
     * @returns A Bun Server object
     */
    listen(options?: IListen): Server;
}
interface IListen {
    port?: number;
    hostname?: string;
    development?: boolean;
}
export interface IHandler {
    (ctx: Context): Context | Promise<Context>;
}
export {};
