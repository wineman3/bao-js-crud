"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Bao_instances, _Bao_router, _Bao_handleMethod, _Bao_serve;
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("./context");
const middleware_1 = require("./middleware");
const router_1 = require("./router");
class Bao {
    constructor() {
        _Bao_instances.add(this);
        _Bao_router.set(this, new router_1.default());
        /**
         * Default error handler
         *
         * @param error
         * @returns
         */
        this.errorHandler = (error) => {
            console.error(error);
            return new Response("An error occurred! Please check the server logs.", {
                status: 500,
            });
        };
    }
    /**
     * Middleware to be run before the path handler
     *
     * @param fn The middleware function to be run before the path handler
     */
    before(fn) {
        __classPrivateFieldGet(this, _Bao_router, "f").middleware.register(fn, middleware_1.MiddlewarePosition.Before);
    }
    /**
     * Middleware to be run after the path handler
     *
     * @param fn The middleware function to be run after the path handler
     */
    after(fn) {
        __classPrivateFieldGet(this, _Bao_router, "f").middleware.register(fn, middleware_1.MiddlewarePosition.After);
    }
    // HTTP methods
    /**
     * Creates a route for any HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    any(path, handler) {
        __classPrivateFieldGet(this, _Bao_instances, "m", _Bao_handleMethod).call(this, "ANY", path, handler);
    }
    /**
     * Creates a route for the GET HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    get(path, handler) {
        __classPrivateFieldGet(this, _Bao_instances, "m", _Bao_handleMethod).call(this, "GET", path, handler);
    }
    /**
     * Creates a route for the POST HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    post(path, handler) {
        __classPrivateFieldGet(this, _Bao_instances, "m", _Bao_handleMethod).call(this, "POST", path, handler);
    }
    /**
     * Creates a route for the PUT HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    put(path, handler) {
        __classPrivateFieldGet(this, _Bao_instances, "m", _Bao_handleMethod).call(this, "PUT", path, handler);
    }
    /**
     * Creates a route for the DELETE HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    delete(path, handler) {
        __classPrivateFieldGet(this, _Bao_instances, "m", _Bao_handleMethod).call(this, "DELETE", path, handler);
    }
    /**
     * Creates a route for the PATCH HTTP method
     *
     * @param path The path of the route
     * @param handler The handler function for the route
     */
    patch(path, handler) {
        __classPrivateFieldGet(this, _Bao_instances, "m", _Bao_handleMethod).call(this, "PATCH", path, handler);
    }
    /**
     * Start the server on the specified port
     *
     * @param options The options for the server
     * @returns A Bun Server object
     */
    listen(options = {}) {
        return Bun.serve(__classPrivateFieldGet(this, _Bao_instances, "m", _Bao_serve).call(this, options));
    }
}
exports.default = Bao;
_Bao_router = new WeakMap(), _Bao_instances = new WeakSet(), _Bao_handleMethod = function _Bao_handleMethod(method, path, handler) {
    __classPrivateFieldGet(this, _Bao_router, "f").register(method, path, handler);
}, _Bao_serve = function _Bao_serve(listen) {
    let router = __classPrivateFieldGet(this, _Bao_router, "f");
    let errorHandler = this.errorHandler;
    return {
        async fetch(req) {
            let ctx = new context_1.default(req);
            return await router.handle(ctx);
        },
        error(error) {
            return errorHandler(error);
        },
        port: listen.port || 3000,
        development: listen.development || false,
        hostname: listen.hostname || "0.0.0.0",
    };
};
//# sourceMappingURL=bao.js.map