"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Middleware_before, _Middleware_after;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiddlewarePosition = void 0;
class Middleware {
    constructor() {
        _Middleware_before.set(this, []);
        _Middleware_after.set(this, []);
    }
    /**
     * Register the middleware with the Middleware object
     *
     * @param fn The middleware function
     * @param pos The position the middleware should be run relative the the route handler
     * @returns The position of the middleware in its respective queue
     */
    register(fn, pos) {
        if (pos == MiddlewarePosition.Before)
            return __classPrivateFieldGet(this, _Middleware_before, "f").push(fn);
        return __classPrivateFieldGet(this, _Middleware_after, "f").push(fn);
    }
    /**
     * Runs all the middleware to be run before the route handler
     *
     * @param ctx The Context supplied by the router
     * @returns The Content object just before it reaches the route handler
     */
    async before(ctx) {
        for (const middleware of __classPrivateFieldGet(this, _Middleware_before, "f")) {
            if (!ctx.isLocked())
                ctx = await Promise.resolve(middleware(ctx));
        }
        return ctx;
    }
    /**
     * Runs all the middleware to be run after the route handler
     *
     * @param ctx The Context from the route handler
     * @returns The final Context object
     */
    async after(ctx) {
        for (const middleware of __classPrivateFieldGet(this, _Middleware_after, "f")) {
            if (!ctx.isLocked())
                ctx = await Promise.resolve(middleware(ctx));
        }
        return ctx;
    }
}
exports.default = Middleware;
_Middleware_before = new WeakMap(), _Middleware_after = new WeakMap();
var MiddlewarePosition;
(function (MiddlewarePosition) {
    MiddlewarePosition[MiddlewarePosition["Before"] = 0] = "Before";
    MiddlewarePosition[MiddlewarePosition["After"] = 1] = "After";
})(MiddlewarePosition = exports.MiddlewarePosition || (exports.MiddlewarePosition = {}));
//# sourceMappingURL=middleware.js.map