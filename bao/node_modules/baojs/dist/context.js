"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Context_forceSend;
Object.defineProperty(exports, "__esModule", { value: true });
class Context {
    constructor(req) {
        /**
         * Anything extra supplied by the middleware
         */
        this.extra = {};
        /**
         * If the Response should be immediately send
         */
        _Context_forceSend.set(this, false);
        /**
         * Creates an empty response and adds it to Context
         *
         * @param options (optional) The Response object options
         * @returns The Context object with an empty response
         */
        this.sendEmpty = (options = { headers: {} }) => {
            this.res = new Response(null, options);
            return this;
        };
        /**
         * Creates a response with pretty printed JSON and adds it to Context
         *
         * @param json The JSON to be sent in the response
         * @param options (optional) The Response object options
         * @returns The Context object with pretty printed JSON
         */
        this.sendPrettyJson = (json, options = { headers: {} }) => {
            options.headers["Content-Type"] = "application/json";
            this.res = new Response(JSON.stringify(json, null, 2), options);
            return this;
        };
        /**
         * Creates a JSON response and adds it to Context
         *
         * @param json The JSON to be sent in the response
         * @param options (optional) The Response object options
         * @returns The Context object with plain JSON
         */
        this.sendJson = (json, options = { headers: {} }) => {
            options.headers["Content-Type"] = "application/json";
            this.res = new Response(JSON.stringify(json), options);
            return this;
        };
        /**
         * Creates a simple response with the supplied text and adds it to Context
         *
         * @param text The text to respond with
         * @param options (optional) The Response object options
         * @returns The Context object with a text response
         */
        this.sendText = (text, options = { headers: {} }) => {
            this.res = new Response(text, options);
            return this;
        };
        /**
         * Adds a supplied Response to the Context object
         *
         * @param res The Response object to be added to Context
         * @returns The Context object with the supplied Response
         */
        this.sendRaw = (res) => {
            this.res = res;
            return this;
        };
        this.req = req;
        this.res = null;
        const url = new URL(req.url);
        this.method = req.method;
        this.headers = req.headers;
        this.host = url.host;
        this.path = url.pathname;
        this.url = url;
        /**
         * Calling this (or arrayBuffer(), json(), text()) here
         * prevents freezing when trying to access any of them later
         */
        this.req.blob();
    }
    /**
     * Force sending this Context as is without any further execution (useful for middleware)
     *
     * Ensure that the Response field `res` is set before executing
     */
    forceSend() {
        __classPrivateFieldSet(this, _Context_forceSend, true, "f");
        return this;
    }
    /**
     * Checks if the Response should be send without sending the Context through anymore processing
     *
     * @returns If further execution of this Context should not go ahead
     */
    isLocked() {
        return __classPrivateFieldGet(this, _Context_forceSend, "f");
    }
}
exports.default = Context;
_Context_forceSend = new WeakMap();
//# sourceMappingURL=context.js.map